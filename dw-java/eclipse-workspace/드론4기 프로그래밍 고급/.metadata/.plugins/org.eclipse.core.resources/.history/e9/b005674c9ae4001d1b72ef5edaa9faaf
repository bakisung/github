package kr.or.dw.basic;

public class EqualsHashCodeTest {

	public static void main(String[] args) {
		/*
		 * - equals() 		==> 두 객체의 내용이 같은지 검사하는 연산자
		 * - hashCode()		==> 두 객체의 동일성을 검사하는 연산자
		 * 
		 * - HashSet, HashTable, HashMap 과 같이 Hash로 시작하는 컬렉션들은 객체의
		 *   의미상의 동일성을 비교하기 위해서 hashCode() 메서드를 호출하여 비교한다.
		 *   그러므로, 객체가 같은지 여부를 결정하려면 hashCode() 메서드를 재정의 해야한다.
		 *  
		 * - hashCode() 메서드에서 사용하는 '해싱 알고리즘'은 서로 다른 객체들에 대해서 같은
		 *   hashCode를 나타낼 수도 있다.
		 */
		
		Person p1 = new Person();
		p1.setId(1);
		p1.setName("홍길동");
		
		Person p2 = new Person();
		p2.setId(1);
		p2.setName("홍길동");
		
		System.out.println(p1 == p2);		// 참조값(번지)이 들어가는거라서 false
		System.out.println(p1.equals(p2));	// equals는 '=='으로 비교한다.
		
		System.out.println("p1 : " + p1.hashCode());
		System.out.println("p2 : " + p2.hashCode());
		
	} // 메인 종료

} // 이퀄스해쉬코드테스트 클래스 종료

class Person {
	private String name;
	private int id;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return super.hashCode();
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {return true;}
		if(obj == null || getClass() != obj.getClass()) {return false;}
		Person person = (Person)obj;
		return person.name.equals(name);
	}
	
	
	
} // 퍼슨 클래스 종료
