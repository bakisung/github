package kr.or.dw.basic;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class MapTest {

	public static void main(String[] args) {

		/*
		 * Map ==> key값과 value값을 한 쌍으로 관리하는 객체
		 * - key값은 중복을 허용하지 않고, 순서(index)가 없다. (Set의 특징을 갖는다.)
		 * - value 값은 중복을 허용한다.
		 */
		
		HashMap<String, String> map = new HashMap<>();
		map.put("name", "싱하횽");
		map.put("add", "굴다리 밑");
		map.put("tel", "042-8282-8282 대리운전");
		
		System.out.println("map : " + map);
		
		// 자료 수정 : 데이터를 추가할 때 key 값이 같으면 나중에 추가한 value 값이 저장된다.
		map.put("add", "굴다리 위");
		System.out.println("map : " + map);
		
		// 	자료 삭제 	: remove(key값) ==> 'key값'이 같은 자료를 찾아서 삭제한다.
		//			: 반환값 ==> 삭제된 value 값이 반환된다.
//		String removeData = map.remove("tel");
//		System.out.println("map : " + map);
//		System.out.println("삭제된 데이터 : " + removeData);
		
		// 자료 읽기 : get(key값) ==> key값과 같은 쌍의 value 값을 반환한다.
		System.out.println("이름 : " + map.get("name"));
		System.out.println("전화 : " + map.get("tel"));
		
		// key값의 존재 여부를 나타내는 메서드 : containsKey(key값)
		//	==> 해당 'key값'이 있으면 true, 없으면 false를 반환한다.
		System.out.println("tel 키값의 존재 여부 : " + map.containsKey("tel"));
		System.out.println("age 키값의 존재 여부 : " + map.containsKey("age"));
		
		// Map에 저장된 모든 key값들을 읽어와 전체 Map 데이터를 처리하는 방법
		
		// 방법1 : keySet() 메소드 이용하기
		//		==> Map의 모든 key값들을 읽어와 Set형으로 반환한다.
		Set<String> keyset = map.keySet();
		System.out.println("map에 들어있는 key 값 : " + keyset);
		
		Iterator<String> keyIt = keyset.iterator();
		System.out.println("[Iterator 이용하기]");
		System.out.println("==========================");
	}

}
